<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on 一个懒散的程序猿</title>
    <link>https://catcheroftime.github.io/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on 一个懒散的程序猿</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zn-Hans</language>
    <lastBuildDate>Sat, 14 Aug 2021 21:02:00 +0800</lastBuildDate>
    
	<atom:link href="https://catcheroftime.github.io/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Effective C&#43;&#43; 总览</title>
      <link>https://catcheroftime.github.io/blog/2021-08/effective-c-%E6%80%BB%E8%A7%88/</link>
      <pubDate>Sat, 14 Aug 2021 21:02:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-08/effective-c-%E6%80%BB%E8%A7%88/</guid>
      <description>开个新坑，做一做自己看书的笔记 视 C++ 为一个语言联邦（C、Object-Oriented C++、Template C++、STL） 宁可以编译器替换预处理器（尽量以 const、enum、inline 替换 #define） 尽可能使用 const 确定对象被使用前已先被初始化（构造时赋值（copy 构造函数）比 default 构造后赋值（copy assignment）效率高） 了解 C++ 默默编写并调用哪些函数（编译器暗自为 class 创建 default 构造函数、co</description>
    </item>
    
    <item>
      <title>More Effective C&#43;&#43; 总览</title>
      <link>https://catcheroftime.github.io/blog/2021-08/more-effective-c-%E6%80%BB%E8%A7%88/</link>
      <pubDate>Sat, 14 Aug 2021 21:02:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-08/more-effective-c-%E6%80%BB%E8%A7%88/</guid>
      <description>仔细区别 pointers 和 references（当你知道你需要指向某个东西，而且绝不会改变指向其他东西，或是当你实现一个操作符而其语法需求无法由 pointers 达成，你就应该选择 references；任何其他时候，请采用 pointers） 最好使用 C++ 转型操作符（static_cast、const_cast、dynamic_cast、reinterpret_cast） 绝不要以多态（polymorphically）方式处理数组（多</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 三大特性</title>
      <link>https://catcheroftime.github.io/blog/2021-06/c-%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7/</link>
      <pubDate>Fri, 18 Jun 2021 12:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-06/c-%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7/</guid>
      <description>&lt;p&gt;封装，继承，多态可以说是 C++ 老生常谈的三大特性，简单总结一下基本概念，以及附带一些拓展的内容~&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>拷贝控制(下)</title>
      <link>https://catcheroftime.github.io/blog/2020-11/%E6%8B%B7%E8%B4%9D%E6%8E%A7%E5%88%B6%E4%B8%8B/</link>
      <pubDate>Fri, 20 Nov 2020 12:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-11/%E6%8B%B7%E8%B4%9D%E6%8E%A7%E5%88%B6%E4%B8%8B/</guid>
      <description></description>
    </item>
    
    <item>
      <title>拷贝控制(上)</title>
      <link>https://catcheroftime.github.io/blog/2020-11/%E6%8B%B7%E8%B4%9D%E6%8E%A7%E5%88%B6%E4%B8%8A/</link>
      <pubDate>Wed, 18 Nov 2020 12:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-11/%E6%8B%B7%E8%B4%9D%E6%8E%A7%E5%88%B6%E4%B8%8A/</guid>
      <description></description>
    </item>
    
    <item>
      <title>显式类型转换到底是个啥</title>
      <link>https://catcheroftime.github.io/blog/2020-10/%E6%98%BE%E5%BC%8F%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5/</link>
      <pubDate>Sun, 25 Oct 2020 12:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-10/%E6%98%BE%E5%BC%8F%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5/</guid>
      <description>&lt;p&gt;之前的一篇隐式类型转换，介绍了编译器在什么情况下会偷偷的进行类型转换，以及转换的一些规则，这篇文章主要总结显式类型转换的一些知识&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>隐式类型转换到底是个啥</title>
      <link>https://catcheroftime.github.io/blog/2020-10/%E9%9A%90%E5%BC%8F%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5/</link>
      <pubDate>Sat, 17 Oct 2020 12:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-10/%E9%9A%90%E5%BC%8F%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5/</guid>
      <description>&lt;p&gt;让我们看看编译器到底在哪些情况下会去做隐式转化&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>安全的布尔类型转化</title>
      <link>https://catcheroftime.github.io/blog/2020-10/%E5%AE%89%E5%85%A8%E7%9A%84%E5%B8%83%E5%B0%94%E7%B1%BB%E5%9E%8B%E8%BD%AC%E5%8C%96/</link>
      <pubDate>Tue, 06 Oct 2020 12:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-10/%E5%AE%89%E5%85%A8%E7%9A%84%E5%B8%83%E5%B0%94%E7%B1%BB%E5%9E%8B%E8%BD%AC%E5%8C%96/</guid>
      <description>&lt;p&gt;学习如何将一个对象转换成 &lt;code&gt;bool&lt;/code&gt;对象的同时不引入任何不利的影响&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;11新特性整理</title>
      <link>https://catcheroftime.github.io/blog/2020-03/c-11%E6%96%B0%E7%89%B9%E6%80%A7%E6%95%B4%E7%90%86/</link>
      <pubDate>Tue, 10 Mar 2020 18:22:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-03/c-11%E6%96%B0%E7%89%B9%E6%80%A7%E6%95%B4%E7%90%86/</guid>
      <description>&lt;p&gt;简单整理了 C++11 的新特性&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>