<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithm on 一个懒散的程序猿</title>
    <link>https://catcheroftime.github.io/tags/algorithm/</link>
    <description>Recent content in Algorithm on 一个懒散的程序猿</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zn-Hans</language>
    <lastBuildDate>Thu, 10 Jun 2021 00:15:00 +0800</lastBuildDate>
    
	<atom:link href="https://catcheroftime.github.io/tags/algorithm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>查缺补漏-图搜索算法-续</title>
      <link>https://catcheroftime.github.io/blog/2021-06/%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F-%E5%9B%BE%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95-%E7%BB%AD/</link>
      <pubDate>Thu, 10 Jun 2021 00:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-06/%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F-%E5%9B%BE%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95-%E7%BB%AD/</guid>
      <description>130.被围绕的区域 题目可以转换成，从4个边界开始向内搜索字母 O，标记所有与它直接或间接相连的字母 O int m,n; void solve(vector&amp;lt;vector&amp;lt;char&amp;gt;&amp;gt;&amp;amp; board) { n = board.size(); if (n == 0) return; m = board[0].size(); for (int i = 0; i &amp;lt; n; i++) { dfs(board, i, 0); dfs(board, i, m - 1); } for (int i = 1; i &amp;lt; m - 1; i++) { dfs(board, 0, i); dfs(board, n - 1, i); } for (int i = 0; i &amp;lt; n; i++) { for (int j = 0; j &amp;lt; m; j++) { if (board[i][j] == &#39;A&#39;) { board[i][j] = &#39;O&#39;; } else if (board[i][j] == &#39;O&#39;) { board[i][j] = &#39;X&#39;; } } } } void dfs(vector&amp;lt;vector&amp;lt;char&amp;gt;&amp;gt;&amp;amp; board, int x, int y) { if (x &amp;lt; 0 || x &amp;gt;= n || y &amp;lt; 0 || y &amp;gt;= m || board[x][y] != &#39;O&#39;) { return; } board[x][y] = &#39;A&#39;; dfs(board, x + 1, y); dfs(board, x - 1, y); dfs(board, x, y + 1); dfs(board, x,</description>
    </item>
    
    <item>
      <title>查缺补漏-图搜索算法</title>
      <link>https://catcheroftime.github.io/blog/2021-06/%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F-%E5%9B%BE%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sun, 06 Jun 2021 00:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-06/%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F-%E5%9B%BE%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/</guid>
      <description>图搜素算法,可以分为 2 种 BFS 广度优先搜索 又译作 宽度优先搜索，或 横向优先搜索，是一种图形搜索算法。简单的说，BFS 是从根节点开始，沿着树的宽度遍历树的节点。如果所有节点均被访问，则算法中止。广度优先搜索的实现一般采用 open-closed 表。 从算法的观点，所有因为展开节点而得到的子节点都会被加进一个 先进先出 的队列中。一般的实现里，其邻居节点尚未被检验过的节点会被放置在一个被称为 open 的容器中（例如队列或是链表），而被检验过的</description>
    </item>
    
    <item>
      <title>查缺补漏-排序题篇</title>
      <link>https://catcheroftime.github.io/blog/2021-06/%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F-%E6%8E%92%E5%BA%8F%E9%A2%98%E7%AF%87/</link>
      <pubDate>Thu, 03 Jun 2021 00:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-06/%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F-%E6%8E%92%E5%BA%8F%E9%A2%98%E7%AF%87/</guid>
      <description>&lt;p&gt;之前总结了常见的十种排序算法,但是不做题怎么可能巩固呢?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>查缺补漏-二分查找</title>
      <link>https://catcheroftime.github.io/blog/2021-05/%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</link>
      <pubDate>Sun, 30 May 2021 00:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-05/%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</guid>
      <description></description>
    </item>
    
    <item>
      <title>查缺补漏-双指针</title>
      <link>https://catcheroftime.github.io/blog/2021-05/%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F-%E5%8F%8C%E6%8C%87%E9%92%88/</link>
      <pubDate>Wed, 26 May 2021 00:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-05/%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F-%E5%8F%8C%E6%8C%87%E9%92%88/</guid>
      <description></description>
    </item>
    
    <item>
      <title>查缺补漏-贪心算法</title>
      <link>https://catcheroftime.github.io/blog/2021-05/%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</link>
      <pubDate>Tue, 25 May 2021 00:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-05/%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</guid>
      <description></description>
    </item>
    
    <item>
      <title>设计模式-导读&amp;助记</title>
      <link>https://catcheroftime.github.io/blog/2021-05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%AF%BC%E8%AF%BB%E5%8A%A9%E8%AE%B0/</link>
      <pubDate>Mon, 24 May 2021 00:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%AF%BC%E8%AF%BB%E5%8A%A9%E8%AE%B0/</guid>
      <description>&lt;p&gt;你确定你真的对记住了所有的设计模式了吗？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>查缺补漏-排序</title>
      <link>https://catcheroftime.github.io/blog/2021-05/%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F-%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Thu, 13 May 2021 00:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-05/%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F-%E6%8E%92%E5%BA%8F/</guid>
      <description></description>
    </item>
    
    <item>
      <title>猜数字大小</title>
      <link>https://catcheroftime.github.io/blog/2021-01/%E7%8C%9C%E6%95%B0%E5%AD%97%E5%A4%A7%E5%B0%8F/</link>
      <pubDate>Mon, 04 Jan 2021 00:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-01/%E7%8C%9C%E6%95%B0%E5%AD%97%E5%A4%A7%E5%B0%8F/</guid>
      <description>&lt;p&gt;偶然在别人公众号看到一篇关于&lt;strong&gt;猜数字大小&lt;/strong&gt;的题目，刚好是 &lt;code&gt;LeetCode&lt;/code&gt; 上的题目，在 &lt;code&gt;LeetCode&lt;/code&gt; 上又刚好看到一道很接近的扩展题，放一起整理一下&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>