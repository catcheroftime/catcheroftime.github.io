<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Qt on 一个懒散的程序猿</title>
    <link>https://catcheroftime.github.io/tags/qt/</link>
    <description>Recent content in Qt on 一个懒散的程序猿</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zn-Hans</language>
    <lastBuildDate>Fri, 09 Oct 2020 12:15:00 +0800</lastBuildDate>
    
	<atom:link href="https://catcheroftime.github.io/tags/qt/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>QScopedPointer为什么是这样的</title>
      <link>https://catcheroftime.github.io/blog/2020-10/qscopedpointer%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E8%BF%99%E6%A0%B7%E7%9A%84/</link>
      <pubDate>Fri, 09 Oct 2020 12:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-10/qscopedpointer%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E8%BF%99%E6%A0%B7%E7%9A%84/</guid>
      <description>上一篇 QScopedPointer源码解析 详细介绍了代码层次的实现，同时也留下了一个代码上的问题 隐式类型转换这样设计的原因 // Qt 封装的 QScopedPointer 提供的隐式转换代码 typedef T *QScopedPointer:: *RestrictedBool; inline operator RestrictedBool() const { return isNull() ? Q_NULLPTR : &amp;amp;QScopedPointer::d; } 旧问题解读 如果有看过前2天发布的一篇翻译的话，现在这一部分代码应该是很好理解的，如果还没有看，我在重复总结一下： 不直接返回 bool 类型是因为 bool 类型可以隐式转换为算术类型如整型，浮点型等，所以较易被误用 所以先转换成一个中间过</description>
    </item>
    
    <item>
      <title>安全的布尔类型转化</title>
      <link>https://catcheroftime.github.io/blog/2020-10/%E5%AE%89%E5%85%A8%E7%9A%84%E5%B8%83%E5%B0%94%E7%B1%BB%E5%9E%8B%E8%BD%AC%E5%8C%96/</link>
      <pubDate>Tue, 06 Oct 2020 12:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-10/%E5%AE%89%E5%85%A8%E7%9A%84%E5%B8%83%E5%B0%94%E7%B1%BB%E5%9E%8B%E8%BD%AC%E5%8C%96/</guid>
      <description>学习如何将一个对象转换成 bool对象的同时不引入任何不利的影响 本篇文章主要是对下面这篇英文博客的翻译，并且 补充 了一些额外的注释 https://www.artima.com/cppsource/safebool.html 在 C++ 中，有很多方式可以为一个类提供布尔检测， 而提供这种支持是为了让类使用起来变得更加直观，支持通用编程，或者二者兼顾。我们将研究四种主流的方式来实现布尔检测这个功能。并且提供一种新的解决方案，该方案没有其他四种潜在的陷阱和危险。 目标 一些类型，类似于指针，允许我们以布尔的形</description>
    </item>
    
    <item>
      <title>QScopedPointer源码分析</title>
      <link>https://catcheroftime.github.io/blog/2020-09/qscopedpointer%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 23 Sep 2020 00:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-09/qscopedpointer%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;&lt;code&gt;QT&lt;/code&gt; 下类似于 &lt;code&gt;std::unique_ptr&lt;/code&gt; 的 &lt;code&gt;QScopedPointer&lt;/code&gt; 智能指针源码分析&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>QInputDialog源码分析(下)</title>
      <link>https://catcheroftime.github.io/blog/2020-09/qinputdialog%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%8B/</link>
      <pubDate>Thu, 03 Sep 2020 00:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-09/qinputdialog%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%8B/</guid>
      <description>&lt;p&gt;&lt;code&gt;QInputDialog源码分析(上)&lt;/code&gt; 里主要针对 &lt;code&gt;QInputDialogPrivate&lt;/code&gt; 类的实现做了很详细的介绍，第二部分主要就是介绍 &lt;code&gt;QInputDialog&lt;/code&gt; 和看源码过程中一些其他知识点的总结&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>QInputDialog源码分析(上)</title>
      <link>https://catcheroftime.github.io/blog/2020-09/qinputdialog%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%8A/</link>
      <pubDate>Wed, 02 Sep 2020 00:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-09/qinputdialog%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%8A/</guid>
      <description>&lt;p&gt;前几天的博客中介绍了如何更自由的调整 &lt;code&gt;QInputDialog&lt;/code&gt; 类，当时留了一个坑，想完整的学习 &lt;code&gt;QInputDialog&lt;/code&gt; 源码的实现，我回来填坑了, 整片文章可能比较冗长，主要是总结了阅读源码过程中一些感受和疑问&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Qt-图片裁切</title>
      <link>https://catcheroftime.github.io/blog/2020-08/qt-%E5%9B%BE%E7%89%87%E8%A3%81%E5%88%87/</link>
      <pubDate>Sun, 30 Aug 2020 20:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-08/qt-%E5%9B%BE%E7%89%87%E8%A3%81%E5%88%87/</guid>
      <description>&lt;p&gt;在上传头像过程中，经常会需要将图片裁切成指定的大小，给定一个指定大小的裁切框，调整裁切框位置裁切出理想的图片，今天在这里实现一个简单的图片裁切的应用&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Qt-自定义右下角提示信息弹窗</title>
      <link>https://catcheroftime.github.io/blog/2020-08/qt-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%B3%E4%B8%8B%E8%A7%92%E6%8F%90%E7%A4%BA%E4%BF%A1%E6%81%AF%E5%BC%B9%E7%AA%97/</link>
      <pubDate>Tue, 11 Aug 2020 00:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-08/qt-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%B3%E4%B8%8B%E8%A7%92%E6%8F%90%E7%A4%BA%E4%BF%A1%E6%81%AF%E5%BC%B9%E7%AA%97/</guid>
      <description>&lt;p&gt;偶然看到 &lt;code&gt;web&lt;/code&gt; 端某个应用，右下角的错误信息弹窗配合上动画看起来很不错，于是想通过 &lt;code&gt;Qt&lt;/code&gt; 自己实现一个类似的功能&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>QT-D指针Q指针</title>
      <link>https://catcheroftime.github.io/blog/2019-10/qt-d%E6%8C%87%E9%92%88q%E6%8C%87%E9%92%88/</link>
      <pubDate>Fri, 25 Oct 2019 15:56:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2019-10/qt-d%E6%8C%87%E9%92%88q%E6%8C%87%E9%92%88/</guid>
      <description>&lt;p&gt;在查看 &lt;code&gt;QT&lt;/code&gt; 源码的过程中，QT 无处不在的 &lt;code&gt;Q_D&lt;/code&gt;, &lt;code&gt;Q_Q&lt;/code&gt; 宏，在看源码过程中可能需要先理解，才能更好的继续下去&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>二进制兼容性问题C&#43;&#43;策略</title>
      <link>https://catcheroftime.github.io/blog/2019-10/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98c-%E7%AD%96%E7%95%A5/</link>
      <pubDate>Wed, 02 Oct 2019 11:50:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2019-10/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98c-%E7%AD%96%E7%95%A5/</guid>
      <description>&lt;h2 id=&#34;1-定义&#34;&gt;1. 定义&lt;/h2&gt;

&lt;p&gt;如果与旧版库&lt;strong&gt;动态链接&lt;/strong&gt;的程序&lt;strong&gt;无需重新编译&lt;/strong&gt;就可以与新版本库一起运行，则这个库就是&lt;font color=red&gt;二进制兼容性&lt;/font&gt;的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Qt-进度条插件开发</title>
      <link>https://catcheroftime.github.io/blog/2019-08/qt-%E8%BF%9B%E5%BA%A6%E6%9D%A1%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</link>
      <pubDate>Sat, 10 Aug 2019 20:45:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2019-08/qt-%E8%BF%9B%E5%BA%A6%E6%9D%A1%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</guid>
      <description>&lt;p&gt;在 &lt;a href=&#34;https://www.cnblogs.com/feiyangqingyun/p/6128288.html&#34;&gt;飞扬青云&lt;/a&gt; 大佬的博客下,意外看到一款水波纹的进度条,整体看上去很美观,感觉适用的场景也很多 (1. 单纯的进度条显示 2. 当前状态的展示,例如CPU,内存之类使用的占比)，所以自己也尝试开发了一下.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Qt-时间轴2插件开发</title>
      <link>https://catcheroftime.github.io/blog/2019-07/qt-%E6%97%B6%E9%97%B4%E8%BD%B42%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</link>
      <pubDate>Sun, 28 Jul 2019 18:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2019-07/qt-%E6%97%B6%E9%97%B4%E8%BD%B42%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</guid>
      <description>&lt;p&gt;这篇文章介绍的自定义插件比较简单，主要都是通过绘图完成的。
特点如下： 1. 精度是可以放缩  2. 时间轴时间连续  3. 可以通过鼠标左右滑动改变时间轴显示时间。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Qt-时间轴1插件开发</title>
      <link>https://catcheroftime.github.io/blog/2019-07/qt-%E6%97%B6%E9%97%B4%E8%BD%B41%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</link>
      <pubDate>Wed, 17 Jul 2019 20:45:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2019-07/qt-%E6%97%B6%E9%97%B4%E8%BD%B41%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</guid>
      <description>&lt;p&gt;通过前面一节提到的 Qt 自定义插件的开发，开发出一个类似于统计一天不同时间段的插件，这种插件在摄像头的计划中能很频繁看到，例如0点到9点做录像任务， 9点到下午5点做行为检测任务， 晚上10点到12点继续做录像计划这种场景。而这篇文章主要记录一下自己开发过程中的一些思路和简单的代码解释，以及目前还存在问题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Qt-自定义插件开发</title>
      <link>https://catcheroftime.github.io/blog/2019-07/qt-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</link>
      <pubDate>Mon, 15 Jul 2019 00:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2019-07/qt-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</guid>
      <description>&lt;p&gt;&lt;code&gt;Qt Designer&lt;/code&gt; 中自带的控件虽然能够在很大程度上满足我们日常的开发，但是当遇到一些比较特殊需求时，往往显得力不从心。
所以自定义插件的开发，并将其导入Qt的设计师中，这样可以像基本控件一样拖拽到UI界面中，同时也可以自定义一些属于插件的独有属性，直接在UI界面中配置，十分方便快捷。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>