<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on 一个懒散的程序猿</title>
    <link>https://catcheroftime.github.io/blog/</link>
    <description>Recent content in Blogs on 一个懒散的程序猿</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zn-Hans</language>
    <lastBuildDate>Mon, 10 Jun 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://catcheroftime.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Effective C&#43;&#43; 总览</title>
      <link>https://catcheroftime.github.io/blog/2021-08/effective-c-%E6%80%BB%E8%A7%88/</link>
      <pubDate>Sat, 14 Aug 2021 21:02:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-08/effective-c-%E6%80%BB%E8%A7%88/</guid>
      <description>开个新坑，做一做自己看书的笔记 视 C++ 为一个语言联邦（C、Object-Oriented C++、Template C++、STL） 宁可以编译器替换预处理器（尽量以 const、enum、inline 替换 #define） 尽可能使用 const 确定对象被使用前已先被初始化（构造时赋值（copy 构造函数）比 default 构造后赋值（copy assignment）效率高） 了解 C++ 默默编写并调用哪些函数（编译器暗自为 class 创建 default 构造函数、co</description>
    </item>
    
    <item>
      <title>More Effective C&#43;&#43; 总览</title>
      <link>https://catcheroftime.github.io/blog/2021-08/more-effective-c-%E6%80%BB%E8%A7%88/</link>
      <pubDate>Sat, 14 Aug 2021 21:02:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-08/more-effective-c-%E6%80%BB%E8%A7%88/</guid>
      <description>仔细区别 pointers 和 references（当你知道你需要指向某个东西，而且绝不会改变指向其他东西，或是当你实现一个操作符而其语法需求无法由 pointers 达成，你就应该选择 references；任何其他时候，请采用 pointers） 最好使用 C++ 转型操作符（static_cast、const_cast、dynamic_cast、reinterpret_cast） 绝不要以多态（polymorphically）方式处理数组（多</description>
    </item>
    
    <item>
      <title>H.264裸流结构分析</title>
      <link>https://catcheroftime.github.io/blog/2021-08/h.264%E8%A3%B8%E6%B5%81%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/</link>
      <pubDate>Fri, 06 Aug 2021 00:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-08/h.264%E8%A3%B8%E6%B5%81%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;简单分析一下 H.264 AnnexB 格式的裸流格式&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>最小化到托盘及其相关功能</title>
      <link>https://catcheroftime.github.io/blog/2021-08/%E6%9C%80%E5%B0%8F%E5%8C%96%E5%88%B0%E6%89%98%E7%9B%98%E5%8F%8A%E5%85%B6%E7%9B%B8%E5%85%B3%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Sun, 01 Aug 2021 00:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-08/%E6%9C%80%E5%B0%8F%E5%8C%96%E5%88%B0%E6%89%98%E7%9B%98%E5%8F%8A%E5%85%B6%E7%9B%B8%E5%85%B3%E5%8A%9F%E8%83%BD/</guid>
      <description>&lt;p&gt;一个客户端程序, 有时候会需要提供退出到最小化托盘的功能, Qt 的 &lt;code&gt;QSystemTrayIcon&lt;/code&gt; 类就刚好实现了这个功能, 这篇文章主要就是对它简单封装一下,实现一些额外的功能&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 三大特性</title>
      <link>https://catcheroftime.github.io/blog/2021-06/c-%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7/</link>
      <pubDate>Fri, 18 Jun 2021 12:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-06/c-%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7/</guid>
      <description>&lt;p&gt;封装，继承，多态可以说是 C++ 老生常谈的三大特性，简单总结一下基本概念，以及附带一些拓展的内容~&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>查缺补漏-图搜索算法-续</title>
      <link>https://catcheroftime.github.io/blog/2021-06/%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F-%E5%9B%BE%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95-%E7%BB%AD/</link>
      <pubDate>Thu, 10 Jun 2021 00:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-06/%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F-%E5%9B%BE%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95-%E7%BB%AD/</guid>
      <description>130.被围绕的区域 题目可以转换成，从4个边界开始向内搜索字母 O，标记所有与它直接或间接相连的字母 O int m,n; void solve(vector&amp;lt;vector&amp;lt;char&amp;gt;&amp;gt;&amp;amp; board) { n = board.size(); if (n == 0) return; m = board[0].size(); for (int i = 0; i &amp;lt; n; i++) { dfs(board, i, 0); dfs(board, i, m - 1); } for (int i = 1; i &amp;lt; m - 1; i++) { dfs(board, 0, i); dfs(board, n - 1, i); } for (int i = 0; i &amp;lt; n; i++) { for (int j = 0; j &amp;lt; m; j++) { if (board[i][j] == &#39;A&#39;) { board[i][j] = &#39;O&#39;; } else if (board[i][j] == &#39;O&#39;) { board[i][j] = &#39;X&#39;; } } } } void dfs(vector&amp;lt;vector&amp;lt;char&amp;gt;&amp;gt;&amp;amp; board, int x, int y) { if (x &amp;lt; 0 || x &amp;gt;= n || y &amp;lt; 0 || y &amp;gt;= m || board[x][y] != &#39;O&#39;) { return; } board[x][y] = &#39;A&#39;; dfs(board, x + 1, y); dfs(board, x - 1, y); dfs(board, x, y + 1); dfs(board, x,</description>
    </item>
    
    <item>
      <title>查缺补漏-图搜索算法</title>
      <link>https://catcheroftime.github.io/blog/2021-06/%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F-%E5%9B%BE%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sun, 06 Jun 2021 00:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-06/%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F-%E5%9B%BE%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/</guid>
      <description>图搜素算法,可以分为 2 种 BFS 广度优先搜索 又译作 宽度优先搜索，或 横向优先搜索，是一种图形搜索算法。简单的说，BFS 是从根节点开始，沿着树的宽度遍历树的节点。如果所有节点均被访问，则算法中止。广度优先搜索的实现一般采用 open-closed 表。 从算法的观点，所有因为展开节点而得到的子节点都会被加进一个 先进先出 的队列中。一般的实现里，其邻居节点尚未被检验过的节点会被放置在一个被称为 open 的容器中（例如队列或是链表），而被检验过的</description>
    </item>
    
    <item>
      <title>查缺补漏-排序题篇</title>
      <link>https://catcheroftime.github.io/blog/2021-06/%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F-%E6%8E%92%E5%BA%8F%E9%A2%98%E7%AF%87/</link>
      <pubDate>Thu, 03 Jun 2021 00:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-06/%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F-%E6%8E%92%E5%BA%8F%E9%A2%98%E7%AF%87/</guid>
      <description>&lt;p&gt;之前总结了常见的十种排序算法,但是不做题怎么可能巩固呢?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>查缺补漏-二分查找</title>
      <link>https://catcheroftime.github.io/blog/2021-05/%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</link>
      <pubDate>Sun, 30 May 2021 00:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-05/%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</guid>
      <description></description>
    </item>
    
    <item>
      <title>查缺补漏-双指针</title>
      <link>https://catcheroftime.github.io/blog/2021-05/%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F-%E5%8F%8C%E6%8C%87%E9%92%88/</link>
      <pubDate>Wed, 26 May 2021 00:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-05/%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F-%E5%8F%8C%E6%8C%87%E9%92%88/</guid>
      <description></description>
    </item>
    
    <item>
      <title>查缺补漏-贪心算法</title>
      <link>https://catcheroftime.github.io/blog/2021-05/%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</link>
      <pubDate>Tue, 25 May 2021 00:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-05/%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</guid>
      <description></description>
    </item>
    
    <item>
      <title>设计模式-导读&amp;助记</title>
      <link>https://catcheroftime.github.io/blog/2021-05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%AF%BC%E8%AF%BB%E5%8A%A9%E8%AE%B0/</link>
      <pubDate>Mon, 24 May 2021 00:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%AF%BC%E8%AF%BB%E5%8A%A9%E8%AE%B0/</guid>
      <description>&lt;p&gt;你确定你真的对记住了所有的设计模式了吗？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>免费找电子书的网站总结</title>
      <link>https://catcheroftime.github.io/blog/2021-05/%E5%85%8D%E8%B4%B9%E6%89%BE%E7%94%B5%E5%AD%90%E4%B9%A6%E7%9A%84%E7%BD%91%E7%AB%99%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sat, 15 May 2021 20:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-05/%E5%85%8D%E8%B4%B9%E6%89%BE%E7%94%B5%E5%AD%90%E4%B9%A6%E7%9A%84%E7%BD%91%E7%AB%99%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;p&gt;分享自己收藏夹里的私货~&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>查缺补漏-排序</title>
      <link>https://catcheroftime.github.io/blog/2021-05/%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F-%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Thu, 13 May 2021 00:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-05/%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F-%E6%8E%92%E5%BA%8F/</guid>
      <description></description>
    </item>
    
    <item>
      <title>迭代器模式</title>
      <link>https://catcheroftime.github.io/blog/2021-05/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 06 May 2021 20:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-05/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</guid>
      <description></description>
    </item>
    
    <item>
      <title>访问者模式</title>
      <link>https://catcheroftime.github.io/blog/2021-05/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 04 May 2021 20:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-05/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;U1S1， 挺复杂的一个设计模式~&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python-APScheduler导读</title>
      <link>https://catcheroftime.github.io/blog/2021-05/python-apscheduler%E5%AF%BC%E8%AF%BB/</link>
      <pubDate>Sat, 01 May 2021 19:35:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-05/python-apscheduler%E5%AF%BC%E8%AF%BB/</guid>
      <description>&lt;p&gt;&lt;code&gt;APScheduler&lt;/code&gt; 的从初识到源码阅读已经完结撒花了，再来一个导读的目录，就算是真正的完整了~&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>APScheduler 源码阅读(五) schedulers</title>
      <link>https://catcheroftime.github.io/blog/2021-04/apscheduler-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%BA%94-schedulers/</link>
      <pubDate>Tue, 20 Apr 2021 19:35:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-04/apscheduler-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%BA%94-schedulers/</guid>
      <description>&lt;p&gt;趁热打铁，学习一下 &lt;code&gt;APScheduler&lt;/code&gt; 的 &lt;code&gt;python&lt;/code&gt; 的源码，很好奇任务调度控制的实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>状态模式</title>
      <link>https://catcheroftime.github.io/blog/2021-04/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 10 Apr 2021 20:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-04/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;又是一种优化过于臃肿 &lt;code&gt;if...else...&lt;/code&gt; 语句的方法~&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>中介者模式</title>
      <link>https://catcheroftime.github.io/blog/2021-04/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 08 Apr 2021 20:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-04/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;房东：到处找租客可太麻烦, 直接交给中介, 交给他们管理吧~&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>备忘录模式</title>
      <link>https://catcheroftime.github.io/blog/2021-04/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 06 Apr 2021 20:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-04/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;沃日，竟然被小怪打死了，先回个档 ~&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>职责链模式</title>
      <link>https://catcheroftime.github.io/blog/2021-04/%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 01 Apr 2021 12:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-04/%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;&amp;ndash; 组长,我想请5天假? &amp;ndash; 我没权利批准,我去帮你问问老板~&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>APScheduler 源码阅读(四) triggers(三)</title>
      <link>https://catcheroftime.github.io/blog/2021-03/apscheduler-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E5%9B%9B-triggers%E4%B8%89/</link>
      <pubDate>Thu, 25 Mar 2021 19:35:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-03/apscheduler-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E5%9B%9B-triggers%E4%B8%89/</guid>
      <description>&lt;p&gt;趁热打铁，学习一下 &lt;code&gt;APScheduler&lt;/code&gt; 的 &lt;code&gt;python&lt;/code&gt; 的源码，很好奇任务调度控制的实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>APScheduler 源码阅读(四) triggers(四)</title>
      <link>https://catcheroftime.github.io/blog/2021-03/apscheduler-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E5%9B%9B-triggers%E5%9B%9B/</link>
      <pubDate>Thu, 25 Mar 2021 19:35:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-03/apscheduler-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E5%9B%9B-triggers%E5%9B%9B/</guid>
      <description>&lt;p&gt;趁热打铁，学习一下 &lt;code&gt;APScheduler&lt;/code&gt; 的 &lt;code&gt;python&lt;/code&gt; 的源码，很好奇任务调度控制的实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>APScheduler 源码阅读(四) triggers(二)</title>
      <link>https://catcheroftime.github.io/blog/2021-03/apscheduler-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E5%9B%9B-triggers%E4%BA%8C/</link>
      <pubDate>Wed, 24 Mar 2021 19:35:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-03/apscheduler-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E5%9B%9B-triggers%E4%BA%8C/</guid>
      <description>&lt;p&gt;趁热打铁, 学习一下 &lt;code&gt;APScheduler&lt;/code&gt; 的 &lt;code&gt;python&lt;/code&gt; 的源码, 很好奇任务调度控制的实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>APScheduler 源码阅读(四) triggers(一)</title>
      <link>https://catcheroftime.github.io/blog/2021-03/apscheduler-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E5%9B%9B-triggers%E4%B8%80/</link>
      <pubDate>Tue, 23 Mar 2021 19:35:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-03/apscheduler-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E5%9B%9B-triggers%E4%B8%80/</guid>
      <description>&lt;p&gt;趁热打铁，学习一下 &lt;code&gt;APScheduler&lt;/code&gt; 的 &lt;code&gt;python&lt;/code&gt; 的源码，很好奇任务调度控制的实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>命令模式</title>
      <link>https://catcheroftime.github.io/blog/2021-03/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 13 Mar 2021 20:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-03/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;小明, 你妈让我喊你回去吃饭啦~&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>解释器模式</title>
      <link>https://catcheroftime.github.io/blog/2021-03/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 11 Mar 2021 20:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-03/%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;我们开发时使用频率还挺低，但广泛运用于编译器的一种设计模式~&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>APScheduler 源码阅读(三) jobstores</title>
      <link>https://catcheroftime.github.io/blog/2021-03/apscheduler-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B8%89-jobstores/</link>
      <pubDate>Wed, 10 Mar 2021 19:35:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-03/apscheduler-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B8%89-jobstores/</guid>
      <description>&lt;p&gt;趁热打铁，学习一下 &lt;code&gt;APScheduler&lt;/code&gt; 的 &lt;code&gt;python&lt;/code&gt; 的源码，很好奇任务调度控制的实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>享元模式</title>
      <link>https://catcheroftime.github.io/blog/2021-03/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 06 Mar 2021 10:10:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-03/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;网盘存储同一份文件被不同用户反复保存该怎么办?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>微信公众号封面一键生成器-续</title>
      <link>https://catcheroftime.github.io/blog/2021-03/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%B0%81%E9%9D%A2%E4%B8%80%E9%94%AE%E7%94%9F%E6%88%90%E5%99%A8-%E7%BB%AD/</link>
      <pubDate>Tue, 02 Mar 2021 19:35:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-03/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%B0%81%E9%9D%A2%E4%B8%80%E9%94%AE%E7%94%9F%E6%88%90%E5%99%A8-%E7%BB%AD/</guid>
      <description>&lt;p&gt;上一篇文章介绍了我对小工具的需求，实现过程中用到的 &lt;code&gt;python&lt;/code&gt; 库的信息以及 &lt;code&gt;demo&lt;/code&gt; 的展示，这篇文章主要就是对其中一些实现细节的总结&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>微信公众号封面一键生成器</title>
      <link>https://catcheroftime.github.io/blog/2021-02/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%B0%81%E9%9D%A2%E4%B8%80%E9%94%AE%E7%94%9F%E6%88%90%E5%99%A8/</link>
      <pubDate>Sat, 20 Feb 2021 19:35:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-02/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%B0%81%E9%9D%A2%E4%B8%80%E9%94%AE%E7%94%9F%E6%88%90%E5%99%A8/</guid>
      <description>&lt;p&gt;先说痛点，写完一篇公众号，都要为其配一个封面，而我的封面已经很简单了，大部分情况下都是 &lt;code&gt;文章题目&lt;/code&gt; + &lt;code&gt;背景图片&lt;/code&gt; 的形式，简单使用 &lt;code&gt;PS&lt;/code&gt; 也会，但是每次还要调整图片大小，文字样式，大小等等还是太繁琐，最好给一张 &lt;code&gt;图片&lt;/code&gt; + &lt;code&gt;文字&lt;/code&gt; 按照一定大小，位置直接生成就完事了&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>模板方法模式</title>
      <link>https://catcheroftime.github.io/blog/2021-02/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 11 Feb 2021 20:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-02/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;超实用的代码复用模式&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>策略模式</title>
      <link>https://catcheroftime.github.io/blog/2021-01/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 30 Jan 2021 10:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-01/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;如果看过一些关于如何干掉 &lt;code&gt;if...else&lt;/code&gt; 的文章，大部分都会介绍到 &lt;code&gt;策略模式&lt;/code&gt;，而今天主要就是带大家更全面的了解什么是 &lt;code&gt;策略模式&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python-request库</title>
      <link>https://catcheroftime.github.io/blog/2021-01/python-request%E5%BA%93/</link>
      <pubDate>Fri, 15 Jan 2021 16:02:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-01/python-request%E5%BA%93/</guid>
      <description>&lt;p&gt;在对 &lt;code&gt;http&lt;/code&gt; 的 &lt;code&gt;api&lt;/code&gt; 测试时，或者利用 &lt;code&gt;api&lt;/code&gt; 实现批量添加、删除等等重复的工作时，必然需要利用一个发送 &lt;code&gt;http&lt;/code&gt; 请求的库，今天介绍一个我在使用过程中感觉相当简单的一个库&amp;ndash; &lt;strong&gt;&lt;code&gt;requests&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>外观模式</title>
      <link>https://catcheroftime.github.io/blog/2021-01/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 15 Jan 2021 10:10:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-01/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</guid>
      <description></description>
    </item>
    
    <item>
      <title>装饰模式</title>
      <link>https://catcheroftime.github.io/blog/2021-01/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 12 Jan 2021 10:10:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-01/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/</guid>
      <description></description>
    </item>
    
    <item>
      <title>猜数字大小</title>
      <link>https://catcheroftime.github.io/blog/2021-01/%E7%8C%9C%E6%95%B0%E5%AD%97%E5%A4%A7%E5%B0%8F/</link>
      <pubDate>Mon, 04 Jan 2021 00:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2021-01/%E7%8C%9C%E6%95%B0%E5%AD%97%E5%A4%A7%E5%B0%8F/</guid>
      <description>&lt;p&gt;偶然在别人公众号看到一篇关于&lt;strong&gt;猜数字大小&lt;/strong&gt;的题目，刚好是 &lt;code&gt;LeetCode&lt;/code&gt; 上的题目，在 &lt;code&gt;LeetCode&lt;/code&gt; 上又刚好看到一道很接近的扩展题，放一起整理一下&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>docker 常用命令</title>
      <link>https://catcheroftime.github.io/blog/2020-12/docker-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Tue, 29 Dec 2020 12:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-12/docker-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>&lt;p&gt;整理一下在使用 &lt;code&gt;Docker&lt;/code&gt; 过程中经常会被使用到的一些命令&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>APScheduler 源码阅读(一) executors</title>
      <link>https://catcheroftime.github.io/blog/2020-12/apscheduler-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B8%80-executors/</link>
      <pubDate>Tue, 22 Dec 2020 19:35:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-12/apscheduler-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B8%80-executors/</guid>
      <description>&lt;p&gt;趁热打铁，学习一下 &lt;code&gt;APScheduler&lt;/code&gt; 的 &lt;code&gt;python&lt;/code&gt; 的源码，很好奇任务调度控制的实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>APScheduler 源码阅读(二) job</title>
      <link>https://catcheroftime.github.io/blog/2020-12/apscheduler-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%BA%8C-job/</link>
      <pubDate>Tue, 22 Dec 2020 19:35:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-12/apscheduler-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%BA%8C-job/</guid>
      <description>&lt;p&gt;趁热打铁，学习一下 &lt;code&gt;APScheduler&lt;/code&gt; 的 &lt;code&gt;python&lt;/code&gt; 的源码，很好奇任务调度控制的实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>APScheduler API总结</title>
      <link>https://catcheroftime.github.io/blog/2020-12/apscheduler-api%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 21 Dec 2020 19:35:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-12/apscheduler-api%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;p&gt;之前比较泛泛的介绍了 &lt;code&gt;APScheduler&lt;/code&gt; 库，但是其中有一些模块的接口需要额外注意一下，本篇文章比较干，真正开发的时候，可以当成工具用&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python-APScheduler库</title>
      <link>https://catcheroftime.github.io/blog/2020-12/python-apscheduler%E5%BA%93/</link>
      <pubDate>Sun, 20 Dec 2020 19:35:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-12/python-apscheduler%E5%BA%93/</guid>
      <description>&lt;p&gt;超强大的任务调度库&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>组成模式</title>
      <link>https://catcheroftime.github.io/blog/2020-12/%E7%BB%84%E6%88%90%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 11 Dec 2020 10:10:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-12/%E7%BB%84%E6%88%90%E6%A8%A1%E5%BC%8F/</guid>
      <description></description>
    </item>
    
    <item>
      <title>桥接模式</title>
      <link>https://catcheroftime.github.io/blog/2020-12/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 07 Dec 2020 10:10:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-12/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Python-tkinter库</title>
      <link>https://catcheroftime.github.io/blog/2020-11/python-tkinter%E5%BA%93/</link>
      <pubDate>Sat, 28 Nov 2020 19:35:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-11/python-tkinter%E5%BA%93/</guid>
      <description></description>
    </item>
    
    <item>
      <title>代理模式</title>
      <link>https://catcheroftime.github.io/blog/2020-11/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 26 Nov 2020 23:10:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-11/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</guid>
      <description></description>
    </item>
    
    <item>
      <title>适配器模式</title>
      <link>https://catcheroftime.github.io/blog/2020-11/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 25 Nov 2020 23:10:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-11/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;你挑的嘛，偶像&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>拷贝控制(下)</title>
      <link>https://catcheroftime.github.io/blog/2020-11/%E6%8B%B7%E8%B4%9D%E6%8E%A7%E5%88%B6%E4%B8%8B/</link>
      <pubDate>Fri, 20 Nov 2020 12:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-11/%E6%8B%B7%E8%B4%9D%E6%8E%A7%E5%88%B6%E4%B8%8B/</guid>
      <description></description>
    </item>
    
    <item>
      <title>拷贝控制(上)</title>
      <link>https://catcheroftime.github.io/blog/2020-11/%E6%8B%B7%E8%B4%9D%E6%8E%A7%E5%88%B6%E4%B8%8A/</link>
      <pubDate>Wed, 18 Nov 2020 12:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-11/%E6%8B%B7%E8%B4%9D%E6%8E%A7%E5%88%B6%E4%B8%8A/</guid>
      <description></description>
    </item>
    
    <item>
      <title>原型模式</title>
      <link>https://catcheroftime.github.io/blog/2020-11/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 17 Nov 2020 12:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-11/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;可能是最简单的创建型模式&amp;ndash;原型模式&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UML类图</title>
      <link>https://catcheroftime.github.io/blog/2020-11/uml%E7%B1%BB%E5%9B%BE/</link>
      <pubDate>Sun, 15 Nov 2020 00:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-11/uml%E7%B1%BB%E5%9B%BE/</guid>
      <description>&lt;p&gt;在总结设计模式的时候，经常需要通过它们的 &lt;code&gt;UML&lt;/code&gt; 图来更整体的了解设计模式的代码结构，这篇文章主要就是总结 &lt;code&gt;UML&lt;/code&gt; 的一些相关知识&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>建造者模式</title>
      <link>https://catcheroftime.github.io/blog/2020-11/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 06 Nov 2020 12:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-11/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;来来来，换个建造者模式走一走&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>抽象工厂模式</title>
      <link>https://catcheroftime.github.io/blog/2020-11/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 03 Nov 2020 23:10:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-11/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;经过一层一层抽象，来到了最复杂的抽象工厂模式。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>工厂方法模式</title>
      <link>https://catcheroftime.github.io/blog/2020-10/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 29 Oct 2020 22:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-10/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;本篇文章会先介绍 &lt;code&gt;工厂方法模式​&lt;/code&gt; 的一些知识和特点，并在最后对 &lt;code&gt;工厂方法模式&lt;/code&gt; 和 &lt;code&gt;简单工厂模式&lt;/code&gt; 这二者之间的异同做一些分析&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>简单工厂模式</title>
      <link>https://catcheroftime.github.io/blog/2020-10/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 26 Oct 2020 22:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-10/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;简单工厂走一走~&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>显式类型转换到底是个啥</title>
      <link>https://catcheroftime.github.io/blog/2020-10/%E6%98%BE%E5%BC%8F%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5/</link>
      <pubDate>Sun, 25 Oct 2020 12:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-10/%E6%98%BE%E5%BC%8F%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5/</guid>
      <description>&lt;p&gt;之前的一篇隐式类型转换，介绍了编译器在什么情况下会偷偷的进行类型转换，以及转换的一些规则，这篇文章主要总结显式类型转换的一些知识&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>单例模式</title>
      <link>https://catcheroftime.github.io/blog/2020-10/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 19 Oct 2020 10:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-10/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;单例模式可能是最简单，最常用的设计模式之一，这篇文章主要总结一些常用的实现方式&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>隐式类型转换到底是个啥</title>
      <link>https://catcheroftime.github.io/blog/2020-10/%E9%9A%90%E5%BC%8F%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5/</link>
      <pubDate>Sat, 17 Oct 2020 12:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-10/%E9%9A%90%E5%BC%8F%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5/</guid>
      <description>&lt;p&gt;让我们看看编译器到底在哪些情况下会去做隐式转化&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>进一步了解 QScopedPointer</title>
      <link>https://catcheroftime.github.io/blog/2020-10/%E8%BF%9B%E4%B8%80%E6%AD%A5%E4%BA%86%E8%A7%A3-qscopedpointer/</link>
      <pubDate>Fri, 09 Oct 2020 12:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-10/%E8%BF%9B%E4%B8%80%E6%AD%A5%E4%BA%86%E8%A7%A3-qscopedpointer/</guid>
      <description>&lt;p&gt;上一篇 &lt;code&gt;QScopedPointer源码解析&lt;/code&gt; 详细介绍了代码层次的实现，同时也留下了一个代码上的问题&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;隐式类型转换这样设计的原因&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>安全的布尔类型转化</title>
      <link>https://catcheroftime.github.io/blog/2020-10/%E5%AE%89%E5%85%A8%E7%9A%84%E5%B8%83%E5%B0%94%E7%B1%BB%E5%9E%8B%E8%BD%AC%E5%8C%96/</link>
      <pubDate>Tue, 06 Oct 2020 12:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-10/%E5%AE%89%E5%85%A8%E7%9A%84%E5%B8%83%E5%B0%94%E7%B1%BB%E5%9E%8B%E8%BD%AC%E5%8C%96/</guid>
      <description>&lt;p&gt;学习如何将一个对象转换成 &lt;code&gt;bool&lt;/code&gt;对象的同时不引入任何不利的影响&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>QScopedPointer源码分析</title>
      <link>https://catcheroftime.github.io/blog/2020-09/qscopedpointer%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 23 Sep 2020 00:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-09/qscopedpointer%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;&lt;code&gt;QT&lt;/code&gt; 下类似于 &lt;code&gt;std::unique_ptr&lt;/code&gt; 的 &lt;code&gt;QScopedPointer&lt;/code&gt; 智能指针源码分析&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>发布订阅模式</title>
      <link>https://catcheroftime.github.io/blog/2020-09/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 19 Sep 2020 20:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-09/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;书接上文观察者模式，今天介绍一个目的和观察者模式一样，但是在代码结构的上存在一定区别的设计模式&amp;ndash;发布订阅模式&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>观察者模式</title>
      <link>https://catcheroftime.github.io/blog/2020-09/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 16 Sep 2020 20:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-09/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;最近在研究 &lt;code&gt;Qt&lt;/code&gt; 信号槽的源码实现，在看源码的过程中发现 &lt;code&gt;Qt&lt;/code&gt; 信号槽很类似于观察者模式，所以先整理一篇观察者模式的文章&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>QInputDialog源码分析(下)</title>
      <link>https://catcheroftime.github.io/blog/2020-09/qinputdialog%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%8B/</link>
      <pubDate>Thu, 03 Sep 2020 00:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-09/qinputdialog%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%8B/</guid>
      <description>&lt;p&gt;&lt;code&gt;QInputDialog源码分析(上)&lt;/code&gt; 里主要针对 &lt;code&gt;QInputDialogPrivate&lt;/code&gt; 类的实现做了很详细的介绍，第二部分主要就是介绍 &lt;code&gt;QInputDialog&lt;/code&gt; 和看源码过程中一些其他知识点的总结&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>QInputDialog源码分析(上)</title>
      <link>https://catcheroftime.github.io/blog/2020-09/qinputdialog%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%8A/</link>
      <pubDate>Wed, 02 Sep 2020 00:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-09/qinputdialog%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%8A/</guid>
      <description>&lt;p&gt;前几天的博客中介绍了如何更自由的调整 &lt;code&gt;QInputDialog&lt;/code&gt; 类，当时留了一个坑，想完整的学习 &lt;code&gt;QInputDialog&lt;/code&gt; 源码的实现，我回来填坑了, 整片文章可能比较冗长，主要是总结了阅读源码过程中一些感受和疑问&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Qt-图片裁切</title>
      <link>https://catcheroftime.github.io/blog/2020-08/qt-%E5%9B%BE%E7%89%87%E8%A3%81%E5%88%87/</link>
      <pubDate>Sun, 30 Aug 2020 20:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-08/qt-%E5%9B%BE%E7%89%87%E8%A3%81%E5%88%87/</guid>
      <description>&lt;p&gt;在上传头像过程中，经常会需要将图片裁切成指定的大小，给定一个指定大小的裁切框，调整裁切框位置裁切出理想的图片，今天在这里实现一个简单的图片裁切的应用&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Qt-自定义右下角提示信息弹窗</title>
      <link>https://catcheroftime.github.io/blog/2020-08/qt-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%B3%E4%B8%8B%E8%A7%92%E6%8F%90%E7%A4%BA%E4%BF%A1%E6%81%AF%E5%BC%B9%E7%AA%97/</link>
      <pubDate>Tue, 11 Aug 2020 00:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-08/qt-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%B3%E4%B8%8B%E8%A7%92%E6%8F%90%E7%A4%BA%E4%BF%A1%E6%81%AF%E5%BC%B9%E7%AA%97/</guid>
      <description>&lt;p&gt;偶然看到 &lt;code&gt;web&lt;/code&gt; 端某个应用，右下角的错误信息弹窗配合上动画看起来很不错，于是想通过 &lt;code&gt;Qt&lt;/code&gt; 自己实现一个类似的功能&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Qt QInputDialog等自带弹窗样式修改</title>
      <link>https://catcheroftime.github.io/blog/2020-08/qt-qinputdialog%E7%AD%89%E8%87%AA%E5%B8%A6%E5%BC%B9%E7%AA%97%E6%A0%B7%E5%BC%8F%E4%BF%AE%E6%94%B9/</link>
      <pubDate>Sat, 01 Aug 2020 00:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-08/qt-qinputdialog%E7%AD%89%E8%87%AA%E5%B8%A6%E5%BC%B9%E7%AA%97%E6%A0%B7%E5%BC%8F%E4%BF%AE%E6%94%B9/</guid>
      <description>&lt;p&gt;在使用 QT 开发客户端的过程中，QT 自带的弹窗类实现的功能很简洁，例如 &lt;strong&gt;QMessageBox&lt;/strong&gt; 作为提醒报错等功能弹窗， &lt;strong&gt;QInputDialog&lt;/strong&gt; 作为 &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt; 等需要用户定义值的获取，使用起来很方便，不用自己重新造轮子，但是在实际开发客户端的过程中，为了保证软件整体样式风格一致，需要对这些弹窗的样式也进行统一，这篇文章简单介绍一下这些类修改样式的一些方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title> QT 中文问题和路径中空格问题</title>
      <link>https://catcheroftime.github.io/blog/2020-04/qt-%E4%B8%AD%E6%96%87%E9%97%AE%E9%A2%98%E5%92%8C%E8%B7%AF%E5%BE%84%E4%B8%AD%E7%A9%BA%E6%A0%BC%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 02 Apr 2020 15:50:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-04/qt-%E4%B8%AD%E6%96%87%E9%97%AE%E9%A2%98%E5%92%8C%E8%B7%AF%E5%BE%84%E4%B8%AD%E7%A9%BA%E6%A0%BC%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;p&gt;记录在使用 QT 开发过程中碰到的关于 QSetting 编写配置文件读写中文的问题，QProcess command 路径中存在中文的问题，以及使用 QString 转 std::string 时，原QString携带中文的问题&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;11新特性整理</title>
      <link>https://catcheroftime.github.io/blog/2020-03/c-11%E6%96%B0%E7%89%B9%E6%80%A7%E6%95%B4%E7%90%86/</link>
      <pubDate>Tue, 10 Mar 2020 18:22:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-03/c-11%E6%96%B0%E7%89%B9%E6%80%A7%E6%95%B4%E7%90%86/</guid>
      <description>&lt;p&gt;简单整理了 C++11 的新特性&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Centos 下 GCC 版本更新</title>
      <link>https://catcheroftime.github.io/blog/2019-12/centos-%E4%B8%8B-gcc-%E7%89%88%E6%9C%AC%E6%9B%B4%E6%96%B0/</link>
      <pubDate>Wed, 11 Dec 2019 17:10:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2019-12/centos-%E4%B8%8B-gcc-%E7%89%88%E6%9C%AC%E6%9B%B4%E6%96%B0/</guid>
      <description>&lt;p&gt;最重要的事情提前说:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;为了降低风险，注意备份或者克隆保存虚拟机状态&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Centos 下 ld 链接器版本更新</title>
      <link>https://catcheroftime.github.io/blog/2019-12/centos-%E4%B8%8B-ld-%E9%93%BE%E6%8E%A5%E5%99%A8%E7%89%88%E6%9C%AC%E6%9B%B4%E6%96%B0/</link>
      <pubDate>Wed, 11 Dec 2019 17:10:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2019-12/centos-%E4%B8%8B-ld-%E9%93%BE%E6%8E%A5%E5%99%A8%E7%89%88%E6%9C%AC%E6%9B%B4%E6%96%B0/</guid>
      <description>&lt;p&gt;最近在编译一个工程的时候, 偶然遇到一个报错&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>windows下通过msys2&#43;mingw编译ffmpeg</title>
      <link>https://catcheroftime.github.io/blog/2019-12/windows%E4%B8%8B%E9%80%9A%E8%BF%87msys2-mingw%E7%BC%96%E8%AF%91ffmpeg/</link>
      <pubDate>Wed, 11 Dec 2019 17:10:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2019-12/windows%E4%B8%8B%E9%80%9A%E8%BF%87msys2-mingw%E7%BC%96%E8%AF%91ffmpeg/</guid>
      <description>&lt;p&gt;在使用 &lt;code&gt;ffmpeg&lt;/code&gt; 过程中，如果是直接使用 &lt;code&gt;ffmpeg&lt;/code&gt; 的库，可以直接在官方下载动态库或者静态库使用，但是当需要根据实际情况修改一些 &lt;code&gt;ffmpeg&lt;/code&gt; 的代码，这时候避免不掉的是编译 &lt;code&gt;ffmpeg&lt;/code&gt; 的源码，下面是我亲测可用的编译过程的整理&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>阴阳师自动挂机脚本-python</title>
      <link>https://catcheroftime.github.io/blog/2019-11/%E9%98%B4%E9%98%B3%E5%B8%88%E8%87%AA%E5%8A%A8%E6%8C%82%E6%9C%BA%E8%84%9A%E6%9C%AC-python/</link>
      <pubDate>Tue, 05 Nov 2019 19:35:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2019-11/%E9%98%B4%E9%98%B3%E5%B8%88%E8%87%AA%E5%8A%A8%E6%8C%82%E6%9C%BA%E8%84%9A%E6%9C%AC-python/</guid>
      <description>&lt;p&gt;阴阳师每次出现大型活动类似于肝绘卷或者超鬼王之类的，每次的手动简直太伤头发了，太伤肝了，而且每次都是重复性的动作，点击开始，时间一到或者怪一死，进入结算界面之后然后点击结束，一个循环就就结束了，然后重新开始，手动既无聊又累，所有广大玩家想出了很多解放双手的点子，我也不例外，下面简单介绍我是如何用 &lt;code&gt;python&lt;/code&gt; 实现简单的挂机脚本,先说一下脚本应用的场景，在电脑上运行的阴阳师也就是PC版，在电脑上使用手机模拟器也可以&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>shell 使用总结</title>
      <link>https://catcheroftime.github.io/blog/2019-10/shell-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</link>
      <pubDate>Tue, 29 Oct 2019 18:22:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2019-10/shell-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;p&gt;在 &lt;code&gt;ubuntu&lt;/code&gt; 下部署服务的时候，经常出现大量反复的操作，而且还容易出错，所有刚好可以通过 &lt;code&gt;shell&lt;/code&gt; 脚本的形式 将这个部分完美替代了&lt;br&gt;在写脚本过程中，对自己使用到一些知识进行了简单的总结&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>QT-D指针Q指针</title>
      <link>https://catcheroftime.github.io/blog/2019-10/qt-d%E6%8C%87%E9%92%88q%E6%8C%87%E9%92%88/</link>
      <pubDate>Fri, 25 Oct 2019 15:56:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2019-10/qt-d%E6%8C%87%E9%92%88q%E6%8C%87%E9%92%88/</guid>
      <description>&lt;p&gt;在查看 &lt;code&gt;QT&lt;/code&gt; 源码的过程中，QT 无处不在的 &lt;code&gt;Q_D&lt;/code&gt;, &lt;code&gt;Q_Q&lt;/code&gt; 宏，在看源码过程中可能需要先理解，才能更好的继续下去&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>程序员的自我修养-链接装载与库</title>
      <link>https://catcheroftime.github.io/blog/2019-10/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB-%E9%93%BE%E6%8E%A5%E8%A3%85%E8%BD%BD%E4%B8%8E%E5%BA%93/</link>
      <pubDate>Sat, 12 Oct 2019 11:02:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2019-10/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB-%E9%93%BE%E6%8E%A5%E8%A3%85%E8%BD%BD%E4%B8%8E%E5%BA%93/</guid>
      <description>&lt;p&gt;每次在用 &lt;code&gt;QT&lt;/code&gt; 点击编译总是很好奇编译器具体对我的代码做了哪些操作，同时也好奇动态库，静态库等在程序运行中是怎么被程序调用的，于是学习一波 《程序员的自我修养-链接装载与库》，通过这篇博客打卡&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>二进制兼容性问题C&#43;&#43;策略</title>
      <link>https://catcheroftime.github.io/blog/2019-10/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98c-%E7%AD%96%E7%95%A5/</link>
      <pubDate>Wed, 02 Oct 2019 11:50:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2019-10/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98c-%E7%AD%96%E7%95%A5/</guid>
      <description>&lt;h2 id=&#34;1-定义&#34;&gt;1. 定义&lt;/h2&gt;

&lt;p&gt;如果与旧版库&lt;strong&gt;动态链接&lt;/strong&gt;的程序&lt;strong&gt;无需重新编译&lt;/strong&gt;就可以与新版本库一起运行，则这个库就是&lt;font color=red&gt;二进制兼容性&lt;/font&gt;的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Qt-UI设计界面(大纲)</title>
      <link>https://catcheroftime.github.io/blog/2019-09/qt-ui%E8%AE%BE%E8%AE%A1%E7%95%8C%E9%9D%A2%E5%A4%A7%E7%BA%B2/</link>
      <pubDate>Thu, 05 Sep 2019 15:50:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2019-09/qt-ui%E8%AE%BE%E8%AE%A1%E7%95%8C%E9%9D%A2%E5%A4%A7%E7%BA%B2/</guid>
      <description>&lt;p&gt;最近突发奇想，想自己整理一份详细的QT开发过程中踩过的坑，也给自己查缺补漏一下。这一部分主要是总结UI &lt;code&gt;设计&lt;/code&gt; 下的所有可视化的按钮和控件， 在介绍默认的控件的同时也会相应总结类的常用使用方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Qt-进度条插件开发</title>
      <link>https://catcheroftime.github.io/blog/2019-08/qt-%E8%BF%9B%E5%BA%A6%E6%9D%A1%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</link>
      <pubDate>Sat, 10 Aug 2019 20:45:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2019-08/qt-%E8%BF%9B%E5%BA%A6%E6%9D%A1%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</guid>
      <description>&lt;p&gt;在 &lt;a href=&#34;https://www.cnblogs.com/feiyangqingyun/p/6128288.html&#34;&gt;飞扬青云&lt;/a&gt; 大佬的博客下,意外看到一款水波纹的进度条,整体看上去很美观,感觉适用的场景也很多 (1. 单纯的进度条显示 2. 当前状态的展示,例如CPU,内存之类使用的占比)，所以自己也尝试开发了一下.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Qt-时间轴2插件开发</title>
      <link>https://catcheroftime.github.io/blog/2019-07/qt-%E6%97%B6%E9%97%B4%E8%BD%B42%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</link>
      <pubDate>Sun, 28 Jul 2019 18:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2019-07/qt-%E6%97%B6%E9%97%B4%E8%BD%B42%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</guid>
      <description>&lt;p&gt;这篇文章介绍的自定义插件比较简单，主要都是通过绘图完成的。
特点如下： 1. 精度是可以放缩  2. 时间轴时间连续  3. 可以通过鼠标左右滑动改变时间轴显示时间。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Qt-时间轴1插件开发</title>
      <link>https://catcheroftime.github.io/blog/2019-07/qt-%E6%97%B6%E9%97%B4%E8%BD%B41%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</link>
      <pubDate>Wed, 17 Jul 2019 20:45:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2019-07/qt-%E6%97%B6%E9%97%B4%E8%BD%B41%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</guid>
      <description>&lt;p&gt;通过前面一节提到的 Qt 自定义插件的开发，开发出一个类似于统计一天不同时间段的插件，这种插件在摄像头的计划中能很频繁看到，例如0点到9点做录像任务， 9点到下午5点做行为检测任务， 晚上10点到12点继续做录像计划这种场景。而这篇文章主要记录一下自己开发过程中的一些思路和简单的代码解释，以及目前还存在问题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python-request库opencv库简单使用说明</title>
      <link>https://catcheroftime.github.io/blog/2019-07/python-request%E5%BA%93opencv%E5%BA%93%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</link>
      <pubDate>Mon, 15 Jul 2019 16:02:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2019-07/python-request%E5%BA%93opencv%E5%BA%93%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</guid>
      <description>&lt;p&gt;在使用 Python 编写测试脚本过程中， 进行服务端功能的测试&lt;br /&gt;
这个文档主要记录脚本中出现的库的安装方式和一些简单的使用说明&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Qt-自定义插件开发</title>
      <link>https://catcheroftime.github.io/blog/2019-07/qt-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</link>
      <pubDate>Mon, 15 Jul 2019 00:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2019-07/qt-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</guid>
      <description>&lt;p&gt;&lt;code&gt;Qt Designer&lt;/code&gt; 中自带的控件虽然能够在很大程度上满足我们日常的开发，但是当遇到一些比较特殊需求时，往往显得力不从心。
所以自定义插件的开发，并将其导入Qt的设计师中，这样可以像基本控件一样拖拽到UI界面中，同时也可以自定义一些属于插件的独有属性，直接在UI界面中配置，十分方便快捷。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySQL 是怎样运行的-第七部分</title>
      <link>https://catcheroftime.github.io/blog/2019-07/mysql-%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%90%E8%A1%8C%E7%9A%84-%E7%AC%AC%E4%B8%83%E9%83%A8%E5%88%86/</link>
      <pubDate>Thu, 04 Jul 2019 00:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2019-07/mysql-%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%90%E8%A1%8C%E7%9A%84-%E7%AC%AC%E4%B8%83%E9%83%A8%E5%88%86/</guid>
      <description>&lt;p&gt;这部分主要跟着大佬的脚步&lt;a href=&#34;https://juejin.im/book/5bffcbc9f265da614b11b731&#34;&gt;&amp;ldquo;MySQL 是怎样运行的：从根儿上理解 MySQL&amp;rdquo;&lt;/a&gt;，学习MySQL的Buffer Pool(缓冲池)。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySQL 是怎样运行的-第六部分</title>
      <link>https://catcheroftime.github.io/blog/2019-07/mysql-%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%90%E8%A1%8C%E7%9A%84-%E7%AC%AC%E5%85%AD%E9%83%A8%E5%88%86/</link>
      <pubDate>Wed, 03 Jul 2019 00:20:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2019-07/mysql-%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%90%E8%A1%8C%E7%9A%84-%E7%AC%AC%E5%85%AD%E9%83%A8%E5%88%86/</guid>
      <description>&lt;p&gt;这部分主要跟着大佬的脚步&lt;a href=&#34;https://juejin.im/book/5bffcbc9f265da614b11b731&#34;&gt;&amp;ldquo;MySQL 是怎样运行的：从根儿上理解 MySQL&amp;rdquo;&lt;/a&gt;，学习&lt;code&gt;MySQL&lt;/code&gt;选择各种执行方案的原因,以及如何优化的知识&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySQL 是怎样运行的-第五部分</title>
      <link>https://catcheroftime.github.io/blog/2019-07/mysql-%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%90%E8%A1%8C%E7%9A%84-%E7%AC%AC%E4%BA%94%E9%83%A8%E5%88%86/</link>
      <pubDate>Tue, 02 Jul 2019 15:08:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2019-07/mysql-%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%90%E8%A1%8C%E7%9A%84-%E7%AC%AC%E4%BA%94%E9%83%A8%E5%88%86/</guid>
      <description>&lt;p&gt;时隔10多天，才开始第五部分的总结，这部分主要跟着大佬的脚步&lt;a href=&#34;https://juejin.im/book/5bffcbc9f265da614b11b731&#34;&gt;&amp;ldquo;MySQL 是怎样运行的：从根儿上理解 MySQL&amp;rdquo;&lt;/a&gt;，学习MySQL单表查询，多表查询，以及访问方式的选择， 这一部分主要是Mysql内部的查询选择&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySQL 是怎样运行的-第四部分</title>
      <link>https://catcheroftime.github.io/blog/2019-06/mysql-%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%90%E8%A1%8C%E7%9A%84-%E7%AC%AC%E5%9B%9B%E9%83%A8%E5%88%86/</link>
      <pubDate>Thu, 20 Jun 2019 15:45:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2019-06/mysql-%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%90%E8%A1%8C%E7%9A%84-%E7%AC%AC%E5%9B%9B%E9%83%A8%E5%88%86/</guid>
      <description>&lt;p&gt;这部分主要跟着大佬的脚步&lt;a href=&#34;https://juejin.im/book/5bffcbc9f265da614b11b731&#34;&gt;&amp;ldquo;MySQL 是怎样运行的：从根儿上理解 MySQL&amp;rdquo;&lt;/a&gt;，学习一下&lt;code&gt;InnoDB&lt;/code&gt;、&lt;code&gt;MyISAM&lt;/code&gt; 这样的存储引擎是如何把表存储在文件系统上的，也就是如何存储到磁盘上的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySQL 是怎样运行的-第三部分</title>
      <link>https://catcheroftime.github.io/blog/2019-06/mysql-%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%90%E8%A1%8C%E7%9A%84-%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86/</link>
      <pubDate>Wed, 19 Jun 2019 14:11:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2019-06/mysql-%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%90%E8%A1%8C%E7%9A%84-%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86/</guid>
      <description>&lt;p&gt;结束了第二部分对于 &lt;code&gt;InnoDB&lt;/code&gt; 一个页存储数据详细的介绍，这一部分主要介绍由页组成的 &lt;code&gt;B+树&lt;/code&gt; 的总结，主要对应&lt;a href=&#34;https://juejin.im/book/5bffcbc9f265da614b11b731&#34;&gt;&amp;ldquo;MySQL 是怎样运行的：从根儿上理解 MySQL&amp;rdquo;&lt;/a&gt;上面的第七章和第八章&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>QSS&amp;CSS</title>
      <link>https://catcheroftime.github.io/blog/2019-06/qsscss/</link>
      <pubDate>Tue, 18 Jun 2019 00:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2019-06/qsscss/</guid>
      <description>&lt;p&gt;主要是记录一下自己子在给客户端美化过程中遇到的一些问题， 以及一些对Qt一些常用控件写好的demo&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySQL 是怎样运行的-第二部分</title>
      <link>https://catcheroftime.github.io/blog/2019-06/mysql-%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%90%E8%A1%8C%E7%9A%84-%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/</link>
      <pubDate>Sat, 15 Jun 2019 15:51:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2019-06/mysql-%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%90%E8%A1%8C%E7%9A%84-%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/</guid>
      <description>&lt;p&gt;时隔三天， 开始第二部分的总结了， 第二部分主要是介绍 InnoDB 的数据存储结构， 主要对应&lt;a href=&#34;https://juejin.im/book/5bffcbc9f265da614b11b731&#34;&gt;&amp;ldquo;MySQL 是怎样运行的：从根儿上理解 MySQL&amp;rdquo;&lt;/a&gt;上面的第五章和第六章&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python 操作 MySQL示例</title>
      <link>https://catcheroftime.github.io/blog/2019-06/python-%E6%93%8D%E4%BD%9C-mysql%E7%A4%BA%E4%BE%8B/</link>
      <pubDate>Fri, 14 Jun 2019 11:12:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2019-06/python-%E6%93%8D%E4%BD%9C-mysql%E7%A4%BA%E4%BE%8B/</guid>
      <description>&lt;p&gt;使用 &lt;code&gt;pymysql&lt;/code&gt; 操作 &lt;code&gt;mysql&lt;/code&gt; 数据库,数据库的创建，表的创建，以及数据的增删改查&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySQL 零碎知识</title>
      <link>https://catcheroftime.github.io/blog/2019-06/mysql-%E9%9B%B6%E7%A2%8E%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Thu, 13 Jun 2019 16:00:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2019-06/mysql-%E9%9B%B6%E7%A2%8E%E7%9F%A5%E8%AF%86/</guid>
      <description>&lt;p&gt;这个文档主要统计一下不常用到的 &lt;code&gt;SQL&lt;/code&gt; 语句和一些知识点， 更新ing&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySQL 是怎样运行的-第一部分</title>
      <link>https://catcheroftime.github.io/blog/2019-06/mysql-%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%90%E8%A1%8C%E7%9A%84-%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86/</link>
      <pubDate>Wed, 12 Jun 2019 22:00:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2019-06/mysql-%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%90%E8%A1%8C%E7%9A%84-%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86/</guid>
      <description>&lt;p&gt;因为想整体了解 MySQL 整体的运行原理和设计原则， 认真读了一下在掘金上面的发布的小测&lt;a href=&#34;https://juejin.im/book/5bffcbc9f265da614b11b731&#34;&gt;&amp;ldquo;MySQL 是怎样运行的：从根儿上理解 MySQL&amp;rdquo;&lt;/a&gt;, 在已经囫囵吞枣的读完一遍之后，想在读第二遍的时候， 顺便整理一下属于自己的理解和文档。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hugo_blog 配置说明</title>
      <link>https://catcheroftime.github.io/blog/2019-06/hugo_blog-%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E/</link>
      <pubDate>Mon, 10 Jun 2019 12:54:26 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2019-06/hugo_blog-%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E/</guid>
      <description>&lt;p&gt;使用Hugo生成静态网页， 并使用github托管&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mongodb4.0 Linux 配置说明</title>
      <link>https://catcheroftime.github.io/blog/2019-03/mongodb4.0-linux-%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E/</link>
      <pubDate>Sun, 31 Mar 2019 12:54:26 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2019-03/mongodb4.0-linux-%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E/</guid>
      <description>&lt;p&gt;介绍mongodb在linux下的安装和配置说明， 以及简单的使用说明&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python操作Mongodb示例</title>
      <link>https://catcheroftime.github.io/blog/2019-03/python%E6%93%8D%E4%BD%9Cmongodb%E7%A4%BA%E4%BE%8B/</link>
      <pubDate>Sun, 31 Mar 2019 12:54:26 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2019-03/python%E6%93%8D%E4%BD%9Cmongodb%E7%A4%BA%E4%BE%8B/</guid>
      <description>&lt;p&gt;使用python 简单操作mongodb数据库&lt;/p&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://catcheroftime.github.io/blog/1-01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/1-01/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://catcheroftime.github.io/blog/1-01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/1-01/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://catcheroftime.github.io/blog/1-01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/1-01/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://catcheroftime.github.io/blog/1-01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/1-01/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://catcheroftime.github.io/blog/1-01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/1-01/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://catcheroftime.github.io/blog/1-01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/1-01/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://catcheroftime.github.io/blog/1-01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/1-01/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://catcheroftime.github.io/blog/1-01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/1-01/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://catcheroftime.github.io/blog/1-01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/1-01/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://catcheroftime.github.io/blog/1-01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/1-01/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://catcheroftime.github.io/blog/1-01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/1-01/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://catcheroftime.github.io/blog/1-01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/1-01/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://catcheroftime.github.io/blog/1-01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/1-01/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://catcheroftime.github.io/blog/1-01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/1-01/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://catcheroftime.github.io/blog/1-01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/1-01/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://catcheroftime.github.io/blog/1-01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/1-01/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://catcheroftime.github.io/blog/1-01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/1-01/</guid>
      <description> 常见疑难杂症  常见疑难杂症  port is already allocated 容器内获取系统时间异常 Docker 默认网段(172.17.0.0) 与主机网段冲突   port is already allocated docker 下的容器停止或者删除之后，而 docker-proxy 依然绑定着端口,没有正常释放
删除所有容器，停止 docker 服务，然后删除 local-kv.db 这个文件，再启动 docker ,最后在重新部署相应容器即可
docker rm $(docker ps -aq) sudo service docker stop sudo rm /var/lib/docker/network/files/local-kv.db sudo service docker start  容器内获取系统时间异常 容器里的服务获取系统时间出现异常，一般情况下都是差 8 小时，所以我们需要在生成 docker 镜像的时候，提前将时区相关信息设置好
 首先确定容器依赖的系统版本，进入容器内部，查看系统版本  docker exec -it 容器名 /bin/sh cat /etc/issue  以我 python 的服务为例
Welcome to Alpine Linux 3.11 Kernel \r on an \m (\l)  我这个基础镜像版本是 Alpine Linux 3.11
所以接下来就是找这个版本如何设置时区的解决办法,简单百度谷歌一下 Alpine Linux 时区设置 就能找到解决方案
在 Dockerfile 中添加一下几行
RUN apk add -U tzdata RUN cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime RUN apk del tzdata  安装时区相关的文件，拷贝需要的时区文件到 localtime, 国内则直接选择 Asia/Shanghai，之后为了保证容器的精简和轻量，移除下载的时区文件。
 不同版本有不同的解决方法，思路大概就是这样了
 之后为了方便，可以将这个更新好时区的容器，当做其他服务的基础镜像包，这样其他人在使用的时候就不用考虑时区的问题了
Docker 默认网段(172.17.0.0) 与主机网段冲突 1、修改 /etc/docker/daemon.json 文件，加入以下代码
{ &amp;quot;default-address-pools&amp;quot;: [{&amp;quot;base&amp;quot;:&amp;quot;172.10.0.0/16&amp;quot;,&amp;quot;size&amp;quot;:24}] }  其中 172.10.0.0/16 是自定义的网段地址
2、删除docker0
ip link delete docker0  3、重新启动docker
service stop docker service start docker  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://catcheroftime.github.io/blog/1-01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/1-01/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://catcheroftime.github.io/blog/1-01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/1-01/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://catcheroftime.github.io/blog/1-01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/1-01/</guid>
      <description> 源码解析 查阅接口的时候发现 class Tk(Misc, Wm) 继承 Misc 和 Wm
 Misc 是一个内部类，主要定义了内部控件的方法 Wm 定义了主窗口提供的一些功能接口  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://catcheroftime.github.io/blog/1-01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/1-01/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>