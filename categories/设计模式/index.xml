<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>设计模式 on 一个懒散的程序猿</title>
    <link>https://catcheroftime.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
    <description>Recent content in 设计模式 on 一个懒散的程序猿</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zn-Hans</language>
    <lastBuildDate>Thu, 29 Oct 2020 22:15:00 +0800</lastBuildDate>
    
	<atom:link href="https://catcheroftime.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>工厂方法模式</title>
      <link>https://catcheroftime.github.io/blog/2020-10/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 29 Oct 2020 22:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-10/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;本篇文章会先介绍 &lt;code&gt;工厂方法模式​&lt;/code&gt; 的一些知识和特点，并在最后对 &lt;code&gt;工厂方法模式&lt;/code&gt; 和 &lt;code&gt;简单工厂模式&lt;/code&gt; 这二者之间的异同做一些分析&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>简单工厂模式</title>
      <link>https://catcheroftime.github.io/blog/2020-10/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 26 Oct 2020 22:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-10/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;简单工厂走一走~&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>单例模式</title>
      <link>https://catcheroftime.github.io/blog/2020-10/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 19 Oct 2020 10:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-10/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;单例模式可能是最简单，最常用的设计模式之一，这篇文章主要总结一些常用的实现方式&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>发布订阅模式</title>
      <link>https://catcheroftime.github.io/blog/2020-09/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 19 Sep 2020 20:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-09/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;书接上文观察者模式，今天介绍一个目的和观察者模式一样，但是在代码结构的上存在一定区别的设计模式&amp;ndash;发布订阅模式&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>观察者模式</title>
      <link>https://catcheroftime.github.io/blog/2020-09/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 16 Sep 2020 20:15:00 +0800</pubDate>
      
      <guid>https://catcheroftime.github.io/blog/2020-09/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;最近在研究 &lt;code&gt;Qt&lt;/code&gt; 信号槽的源码实现，在看源码的过程中发现 &lt;code&gt;Qt&lt;/code&gt; 信号槽很类似于观察者模式，所以先整理一篇观察者模式的文章&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>